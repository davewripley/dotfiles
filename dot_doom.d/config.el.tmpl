;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!

; * Identification
;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "John Doe"
      user-mail-address "john@doe.com")

; * Fonts
;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))

(setq doom-font (font-spec :family "Roboto Mono" :weight 'ultra-light :size 14))
(custom-set-faces! '(font-lock-keyword-face :weight normal))
(custom-set-faces! '(font-lock-constant-face :weight normal))
;; better lambda, better unicode
;; I don't really understand what the fontset stuff does, but this seems to work
(defun my-customize-default-fontset ()
  "Customize the default fontset."
  (set-fontset-font "fontset-default" 'unicode "Iosevka" )
  (set-fontset-font "fontset-default" 'unicode-bmp "Roboto Mono")
  (set-fontset-font "fontset-default" '#x3BB "Roboto Mono"))
(add-hook 'window-setup-hook #'my-customize-default-fontset)
(add-hook 'server-after-make-frame-hook #'my-customize-default-fontset)


;; show me what's actually there!
(advice-add '+emacs-lisp-truncate-pin :override (lambda () ()) )


; * Workspace
;; where to save workspaces
(after! persp-mode
  (setq persp-save-dir "~/Dropbox/org/workspaces"))
;; display current workspace in modeline
(after! doom-modeline
  (setq doom-modeline-persp-name t))

; * Frames
;; Set frame size---take up full screen, but be resizable
(add-to-list 'initial-frame-alist '(width . 1.0))
{{ if eq .computername "2021-mbp16" -}}
     (add-to-list 'initial-frame-alist '(height . 60))
{{- else -}}
     (add-to-list 'initial-frame-alist '(height . 80))
{{- end }}
(add-to-list 'initial-frame-alist '(left . 0))
(add-to-list 'initial-frame-alist '(top . 0))

; * Theme
;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function.
(setq doom-theme 'doom-outrun-electric)
(setq doom-outrun-electric-brighter-modeline t)
;; To edit theme stuff, do like this:
;; Handles current-cursor line in solaire windows:
(custom-theme-set-faces! 'doom-outrun-electric
  `(solaire-hl-line-face :background "#2f2167")
  `(hl-line :background "#201355")
  `(line-number :foreground "dim grey")
  `(elfeed-search-title-face :foreground "grey")
  `(elfeed-search-tag-face :foreground "grey"))

; * Editing
;; word wrap most places
(+global-word-wrap-mode +1)
;; Stop reindenting when I press enter!
(setq-default electric-indent-inhibit t)
;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type 'relative)

;; Settings for company
(use-package! company
  :custom
  (company-selection-default nil)
  (company-require-match nil)
  (company-idle-delay 0)
  (company-show-numbers 'left))

;; keybind for yasnippet expansion
(map! :map text-mode-map
      :prefix "SPC y"
      :desc "Expand snippet" :nv "e" #'yas-expand)

; * org
;; org-directory must be set before org loads!
(setq org-directory "~/Dropbox/org")
(setq org-roam-directory (file-truename "~/Dropbox/org/org-roam"))


;; Org hydra from https://ericjmritz.wordpress.com/2015/10/14/some-personal-hydras-for-gnu-emacs/
(defhydra hydra-org (:color red :columns 3)
  "Org Mode Movements"
  ("n" outline-next-visible-heading "next heading")
  ("p" outline-previous-visible-heading "prev heading")
  ("N" org-forward-heading-same-level "next heading at same level")
  ("P" org-backward-heading-same-level "prev heading at same level")
  ("u" outline-up-heading "up heading")
  ("g" org-goto "goto" :exit t))

(after! org
{{if eq .computername "2021-mbp16" -}}
     ;; get org to open isabelle code blocks in the right mode:
        (add-to-list 'org-src-lang-modes '("isabelle" . isar))
{{- end}}
;; ox-reveal needed for org-reveal
    (load-library "ox-reveal")
;; let org-reveal know where reveal.js lives
    (setq org-reveal-root "file:///Users/dave/Dropbox/programming/reveal.js")
)




; * elfeed (rss)
(after! elfeed
  ;; update feed on load
  (add-hook! 'elfeed-search-mode-hook 'elfeed-update)
  ;; display line numbers
  (add-hook! 'elfeed-search-mode-hook #'display-line-numbers-mode)
  (setq elfeed-goodies/feed-source-column-width 24)
  (setq elfeed-search-filter "@1-month-ago")
)


; * haskell
;;
(after! haskell
  (setq
   lsp-response-timeout 120
   company-idle-delay 0
   lsp-ui-sideline-enable nil   ; compare to flycheck
   lsp-ui-doc-enable nil        ; compare to K
   +lsp-prompt-to-install-server 'quiet
  )
)

;; line numbers in cabal
(add-hook 'haskell-cabal-mode-hook #'display-line-numbers-mode)

;; For Shakespeare templates:
(add-to-list 'auto-mode-alist '("\\.hamlet\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.lucius\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.cassius\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.julius\\'" . web-mode))

; * latex
(after! latex
  (setq reftex-use-external-file-finders t)
  (setq reftex-external-file-finders
      '(("tex" . "kpsewhich -format=.tex %f")
        ("bib" . "kpsewhich -format=.bib %f")))
  (sp-pair "`" nil :actions :rem)
)

(map! :after latex
      :map LaTeX-mode-map
      :prefix "SPC m"
      :desc "Create section" :nv "s" #'LaTeX-section)

(map! :after latex
      :map LaTeX-mode-map
      :prefix "SPC m"
      :desc "Create environment" :nv "e" #'LaTeX-environment)

(map! :after latex
      :map LaTeX-mode-map
      :prefix "SPC m"
      :desc "Compile all" :nv "a" #'TeX-command-run-all)



; * agda
(add-to-list 'auto-mode-alist '("\\.lagda.md\\'" . agda2-mode))

{{if eq .computername "2021-mbp16" -}}
    ; * isabelle
    ; copied and modified from example at https://github.com/m-fleury/isabelle-emacs/blob/Isabelle2021-more-vscode/src/Tools/emacs-lsp/spacemacs_layers/isabelle/README.org

    ;; Isabelle setup
    (use-package! isar-mode
      :mode "\\.thy\\'"
      :config
      ;; (add-hook 'isar-mode-hook 'turn-on-highlight-indentation-mode)
      ;; (add-hook 'isar-mode-hook 'flycheck-mode)
      (add-hook 'isar-mode-hook 'company-mode)
      (add-hook 'isar-mode-hook 'display-line-numbers-mode)
      (add-hook 'isar-mode-hook
                (lambda ()
                  (set (make-local-variable 'company-backends)
                      '((company-dabbrev-code company-yasnippet)))))
      (add-hook 'isar-mode-hook
                (lambda ()
                  (set (make-local-variable 'indent-tabs-mode) nil)))
      (add-hook 'isar-mode-hook
                (lambda ()
                  (yas-minor-mode)))
      )

    (use-package! lsp-isar-parse-args
      :custom
      (lsp-isar-parse-args-nollvm nil))

    (use-package! lsp-isar
      :commands lsp-isar-define-client-and-start
      :custom
      (lsp-isar-output-use-async t)
      (lsp-isar-output-time-before-printing-goal nil)
      (lsp-isar-experimental t)
      (lsp-isar-split-pattern 'lsp-isar-split-pattern-three-columns)
      (lsp-isar-decorations-delayed-printing t)
      :init
      (add-hook 'lsp-isar-init-hook 'lsp-isar-open-output-and-progress-right-spacemacs)
      (add-hook 'isar-mode-hook #'lsp-isar-define-client-and-start)

      (push (concat "/Users/dave/Dropbox/programming/isabelle-emacs/src/Tools/emacs-lsp/yasnippet")
      yas-snippet-dirs)
      (setq lsp-isar-path-to-isabelle "/Users/dave/Dropbox/programming/isabelle-emacs")
      )  ; looks for ~/.doom.d/my/package/my-package.el
{{- end}}







;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
;;

